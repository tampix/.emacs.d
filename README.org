# -*- eval: (tangle-init-org-file-after-save); -*-

#+TITLE: Emacs configuration file
#+AUTHOR: Nicolas Bertrand
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* About
** Foreword

   2018-10-12, I declare .emacs.d bankruptcy.

   My current configuration used to rely on [[https://github.com/cask/cask][Cask]] and [[https://github.com/rdallasgray/pallet][Pallet]] but it
   didn't work anymore after upgrading to Emacs 26. I lived with a
   broken config for some months but it started becoming a real problem
   once I had to go through some config overhaul to accomodate sudden
   needs.

   Another point of pain was how I handled my bindings, especially for
   *Evil* where I had some custom text-object and thus corresponding
   motions. It's been almost a year that I want to try out [[https://github.com/noctuid/general.el][general]]
   alongside [[https://github.com/justbur/emacs-which-key][which-key]] to have a nice experience ala *Magit*,
   *Spacemacs*, *Doom*... etc.

   So, why not use *Spacemacs* or *Doom* directly? Well first, this is
   the occasion for me to learn more of *org-mode* (which I only
   scratched the surface of) and improves my *emacs-lisp*.

   After seeing so many people using org-mode to write their
   configuration with great success, why not do it myself?

   Anyway, I hope this attempt at a clean config won't end in
   bankruptcy this time...

** Aim

   * Keep it fast (at first, aim for less than 0.5s at startup)
   * Don't let it rot
   * Have a little bit of documentation so that I understand some of
     my choices afterwards

** License

   This configuration is licensed under the MIT license. See provided [[https://github.com/tampix/.emacs.d/blob/master/LICENSE][LICENSE]].

* Bootstrapping

  First, let's ensure generated =init.el= has proper scoping and
  encoding.

  #+BEGIN_SRC emacs-lisp
     ;;; -*- lexical-binding: t -*-
     ;;; -*- coding: utf-8 -*-
  #+END_SRC

  Original =init.el= defines the way to reload the configuration.

  #+BEGIN_SRC emacs-lisp
    (defun tangle-init-org-file ()
      "Reload and byte-compile init file from the main org file."
      (interactive)
      (require 'ob-tangle)
      ;; For some reason, I can't make `org-babel-load-file' create the
      ;; .elc file during the first init, sor for now, stick to manual
      ;; tangle -> compile -> load.
      (let* ((org-file (expand-file-name "README.org" user-emacs-directory))
             (init-file (expand-file-name "init" user-emacs-directory))
             (el-file (car (org-babel-tangle-file org-file nil "emacs-lisp"))))
        (rename-file el-file init-file t)
        ;; When first loading the config, load the tangled file anyway to
        ;; ensure that packages are setup.
        (when (bound-and-true-p tangle-init-org-file--first-time)
          (load-file init-file))
        (byte-compile-file init-file t)
        (if debug-on-error
            (rename-file init-file (concat init-file ".el.bak") t)
          (delete-file init-file))))
  #+END_SRC

  It should only be run once, at the first startup, as the real config
  will get generated, byte-compiled and then backed up as
  =init.el.bak= if something really goes awry.

  #+BEGIN_SRC emacs-lisp :tangle no
    (setq-local tangle-init-org-file--first-time t)
    (tangle-init-org-file)
  #+END_SRC

  To ensure modifications in this file update the configuration,
  =tangle-init-org-file= is added to the =after-save-hook= as a local
  variable of this file so that changes apply immediatly.

  #+BEGIN_SRC emacs-lisp
    (defun tangle-init-org-file-after-save ()
      (add-hook 'after-save-hook #'tangle-init-org-file nil t))
    ;; It's a bit ugly but it does the job
    (setq safe-local-variable-values '((eval tangle-init-org-file-after-save)))
  #+END_SRC

** TODO I can't make that work in README.org in GitHub...
   #+BEGIN_SRC org :tangle no
     ,#+INCLUDE: "./init.el" src emacs-lisp
   #+END_SRC

* Configuration

** cl-lib

   Import =cl-lib= at compile time.

   #+BEGIN_SRC emacs-lisp
    (eval-when-compile
      (require 'cl-lib))
   #+END_SRC

** Garbage collector

   Configure GC so it doesn't run during the init.

   #+BEGIN_SRC emacs-lisp
    (let ((default-threshold gc-cons-threshold)
          (default-percentage gc-cons-percentage))
      (setq gc-cons-threshold (* 1000 default-threshold)
            gc-cons-percentage 0.75)
      (cl-flet ((reset-gc-config ()
                  (setq gc-cons-threshold default-threshold
                        gc-cons-percentage default-percentage)))
        (add-hook 'after-init-hook #'reset-gc-config)))
   #+END_SRC

** Setup defaults

   Setup some default values.

   #+BEGIN_SRC emacs-lisp
     (setq echo-keystrokes 0.1
           bidi-display-reordering nil
           require-final-newline t
           ring-bell-function #'ignore
           require-final-newline t
           truncate-lines t
           scroll-step 1
           scroll-conservatively 10000
           auto-window-vscroll nil
           inhibit-default-init t
           inhibit-startup-screen t
           confirm-nonexistent-file-or-buffer nil)
   #+END_SRC

   Disable menus and stuff.

   #+BEGIN_SRC emacs-lisp
     (dolist (mode '(menu-bar-mode
		     tool-bar-mode
		     scroll-bar-mode))
       (when (fboundp mode)
	   (funcall mode 0)))
   #+END_SRC

   Make custom file temporary.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (make-temp-file "custom" nil ".el"))
   #+END_SRC

   Put all auto saves in the same location.

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `((".*" . ,temporary-file-directory))
           auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
   #+END_SRC

   Change yes/no to y/n.

   #+BEGIN_SRC emacs-lisp
     (fset #'yes-or-no-p #'y-or-n-p)
   #+END_SRC

** Setup package.el and use-package

   For now, initialize package.el normally. It might be interesting in
   the future to consider doing what *Doom* or [[https://github.com/nilcons/emacs-use-package-fast/blob/master/errge-dot-emacs.el][emacs-use-package-fast]]
   implements and avoid the call to =package-initialize=.

   #+BEGIN_SRC emacs-lisp
     ;; Avoid init.el pollution...
     (setq package--init-file-ensured t)

     (require 'package)
     (package-initialize)

     (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (setq use-package-always-ensure t)

     (require 'use-package)
   #+END_SRC

** Setup Evil

   I've been a Vim enthusiast for about 10 years before I switched to
   Emacs back in 2013. I discovered Evil in 2012 and tried it out, but
   I wasn't ready to make the switch back then, even if I found the
   experience pretty impressive (especially since, at the time, Evil
   was very young).

   I was using [[https://github.com/ctrlpvim/ctrlp.vim][ctrlp.vim]] and [[https://github.com/tpope/vim-fugitive][fugitive.vim]] then, and was happy about
   it, but i knew that *Magit* was a level above *Fugitive* (I tried
   it out too). What really got me interested in Emacs was that I
   started using more and more of [[https://github.com/Shougo][Shougo]]'s Vim plugins, and one of
   them was [[https://github.com/Shougo/unite.vim][unite.vim]], which seemed brilliant to me. The deeper I got
   into using Unite and the more I got interested into Emacs as it was
   an *anything.el* clone (which became known as *helm* along the
   way).

   Anyway, import *Evil* and setup a very basic configuration for now.

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :commands evil-mode
       :init
       (setq evil-want-C-u-scroll t
             evil-want-C-i-jump t
             evil-want-C-w-in-emacs-state t
             evil-search-module 'evil-search
             evil-default-cursor t)
       :hook (after-init . evil-mode))
   #+END_SRC

** Elisp configuration

   Because the indentation of =cl-flet= and such is still broken as of
   [2018-10-14 Sun], fix their indentation.

   #+BEGIN_SRC emacs-lisp
     (use-package lisp-mode
       :ensure nil
       :commands emacs-lisp-mode
       :config
       (setq indent-tabs-mode nil)
       (setq lisp-indent-function 'common-lisp-indent-function))

     (use-package cl-indent
       :ensure nil
       :commands common-lisp-indent-function
       :config
       (defun fix-elisp-indent (func indent)
         "Fix the indendation of elisp forms that
     `common-lisp-indent-function' might have broken."
         (unless (and (symbolp func)
                      (fboundp func))
           (error "%s: is not a function" func))
         (put func 'common-lisp-indent-function-for-elisp indent))

       (fix-elisp-indent 'defalias 1)
       (fix-elisp-indent 'use-package 1))
   #+END_SRC

** hide-mode-line

   A package from *Doom*, which helps hiding modeline when it isn't
   pertinent.

   #+BEGIN_SRC emacs-lisp
     (use-package hide-mode-line
       :commands hide-mode-line-mode)
   #+END_SRC

** Magit

   *Magit* was what, along with *Evil*, sold me Emacs at first. I
   tried it out back in 2012 and even then, I was amazed by it's ease
   of use and power (mind that I was using *Fugitive* at the time,
   which was powerful in it's own right).

   It's become even more awesome as time went by, and really thank
   it's contributors (and especially [[https://github.com/tarsius][tarsius]] who deserves all the
   praise he got, without any shadow of a doubt, for what is the best
   *Git* porcelain out there.

   Surprisingly, I don't have much configuration going on for
   it... Guess that means the defaults are sane and well thought of.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :commands magit-status
       :config
       ;; Ensure `magit-status' is fullframe. Previous window configuration
       ;; is restored by default.
       (setq magit-display-buffer-function
             #'magit-display-buffer-fullframe-status-v1)
       (add-hook 'magit-mode-hook #'hide-mode-line-mode)
       (add-hook 'magit-popup-mode-hook #'hide-mode-line-mode))
   #+END_SRC

** git-timemachine

   #+BEGIN_SRC emacs-lisp
     (use-package git-timemachine
       :commands (git-timemachine
                  git-timemachine-toggle))
   #+END_SRC

*** TODO fix binding conflicts with evil
