#+TITLE: Emacs configuration file
#+AUTHOR: Nicolas Bertrand
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* About
** Foreword

   2018-10-12, I declare .emacs.d bankruptcy.

   My current configuration used to rely on [[https://github.com/cask/cask][Cask]] and [[https://github.com/rdallasgray/pallet][Pallet]] but it
   didn't work anymore after upgrading to Emacs 26. I lived with a
   broken config for some months but it started becoming a real problem
   once I had to go through some config overhaul to accomodate sudden
   needs.

   Another point of pain was how I handled my bindings, especially for
   *Evil* where I had some custom text-object and thus corresponding
   motions. It's been almost a year that I want to try out [[https://github.com/noctuid/general.el][general]]
   alongside [[https://github.com/justbur/emacs-which-key][which-key]] to have a nice experience ala *Magit*,
   *Spacemacs*, *Doom*... etc.

   So, why not use *Spacemacs* or *Doom* directly? Well first, this is
   the occasion for me to learn more of *org-mode* (which I only
   scratched the surface of) and improves my *emacs-lisp*.

   After seeing so many people using org-mode to write their
   configuration with great success, why not do it myself?

   Anyway, I hope this attempt at a clean config won't end in
   bankruptcy this time...

** Aim

   * Keep it fast (at first, aim for less than 0.5s at startup)
   * Don't let it rot
   * Have a little bit of documentation so that I understand some of
     my choices afterwards

** License

   This configuration is licensed under the MIT license. See provided [[https://github.com/tampix/.emacs.d/blob/master/LICENSE][LICENSE]].

* Bootstrapping

  First, let's ensure generated =init.el= has proper scoping and
  encoding.

  #+BEGIN_SRC emacs-lisp
     ;;; -*- lexical-binding: t -*-
     ;;; -*- coding: utf-8 -*-
  #+END_SRC

  Original =init.el= defines the way to reload the configuration.

  #+BEGIN_SRC emacs-lisp
    (defun tangle-init-org-file ()
      "Reload and byte-compile init file from the main org file."
      (interactive)
      (let ((default-directory user-emacs-directory))
	(require 'org)
	;; tangle `README.org'
	(org-babel-tangle-file "README.org")
	;; load the tangled file to ensure compilation works properly
	(load-file "README.el")
	(byte-compile-file "README.el" t)
	;; set byte-compiled file as init file
	(rename-file "README.elc" "init.elc" t)
	;; keep a backup of generated init file for debugging purposes
	(rename-file "README.el" ".init.el.bak" t)))
  #+END_SRC

  It should only be run once, at the first startup, as the real config
  will get generated, byte-compiled and then backed up as
  =init.el.bak= if something really goes awry.

  #+BEGIN_SRC emacs-lisp :tangle no
    (tangle-init-org-file)
  #+END_SRC

  To ensure modifications in this file update the configuration,
  let's add the =tangle-init-org-file= function to the
  =after-save-hook= so that changes apply immediatly.

  #+BEGIN_SRC emacs-lisp
    (defun maybe-tangle-init-org-file ()
      (let ((cur-name (buffer-file-name))
            (init-name (concat user-emacs-directory "README.org")))
        (when
            (and (derived-mode-p 'org-mode)
                 (equal (file-truename cur-name)
                        (file-truename init-name)))
          ;; XXX suppress hooks while tangling
          (let ((prog-mode-hook nil))
            (tangle-init-org-file)))))

    (add-hook 'after-save-hook #'maybe-tangle-init-org-file)
  #+END_SRC

** TODO I can't make that work in README.org in GitHub...
   #+BEGIN_SRC org :tangle no
     ,#+INCLUDE: "./init.el" src emacs-lisp
   #+END_SRC

* Configuration

** cl-lib

   Import =cl-lib= at compile time.

   #+BEGIN_SRC emacs-lisp
    (eval-when-compile
      (require 'cl-lib))
   #+END_SRC

** Garbage collector

   Configure GC so it doesn't run during the init.

   #+BEGIN_SRC emacs-lisp
    (let ((default-threshold gc-cons-threshold)
          (default-percentage gc-cons-percentage))
      (setq gc-cons-threshold (* 1000 default-threshold)
            gc-cons-percentage 0.75)
      (cl-flet ((reset-gc-config ()
                  (setq gc-cons-threshold default-threshold
                        gc-cons-percentage default-percentage)))
        (add-hook 'after-init-hook #'reset-gc-config)))
   #+END_SRC

** Setup package.el and use-package

   For now, initialize package.el normally. It might be interesting in
   the future to consider doing what *Doom* or [[https://github.com/nilcons/emacs-use-package-fast/blob/master/errge-dot-emacs.el][emacs-use-package-fast]]
   implements and avoid the call to =package-initialize=.

   #+BEGIN_SRC emacs-lisp
     ;; Avoid init.el pollution...
     (setq package--init-file-ensured t)

     (require 'package)

     (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

     (package-initialize)

     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (setq use-package-always-ensure t)

     (require 'use-package)
   #+END_SRC

** Setup Evil

   I've been a Vim enthusiast for about 10 years before I switched to
   Emacs back in 2013. I discovered Evil in 2012 and tried it out, but
   I wasn't ready to make the switch back then, even if I found the
   experience pretty impressive (especially since, at the time, Evil
   was very young).

   I was using [[https://github.com/ctrlpvim/ctrlp.vim][ctrlp.vim]] and [[https://github.com/tpope/vim-fugitive][fugitive.vim]] then, and was happy about
   it, but i knew that *Magit* was a level above *Fugitive* (I tried
   it out too). What really got me interested in Emacs was that I
   started using more and more of [[https://github.com/Shougo][Shougo]]'s Vim plugins, and one of
   them was [[https://github.com/Shougo/unite.vim][unite.vim]], which seemed brilliant to me. The deeper I got
   into using Unite and the more I got interested into Emacs as it was
   an *anything.el* clone (which became known as *helm* along the
   way).

   Anyway, import *Evil* and setup a very basic configuration for now.

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :commands evil-mode
       :init
       (setq evil-want-C-u-scroll t
             evil-want-C-i-jump t
             evil-want-C-w-in-emacs-state t
             evil-search-module 'evil-search
             evil-default-cursor t)
       (add-hook 'after-init-hook 'evil-mode t))
   #+END_SRC

** Elisp configuration

   Because the indentation of =cl-flet= and such is still broken as of
   [2018-10-14 Sun], fix their indentation.

   #+BEGIN_SRC emacs-lisp
     (use-package lisp-mode
       :ensure nil
       :commands emacs-lisp-mode
       :config
       (setq indent-tabs-mode nil)
       (setq lisp-indent-function 'common-lisp-indent-function))

     (use-package cl-indent
       :ensure nil
       :commands common-lisp-indent-function
       :config
       (defun fix-elisp-indent (func indent)
         "Fix the indendation of elisp forms that
     `common-lisp-indent-function' might have broken."
         (unless (and (symbolp func)
                      (fboundp func))
           (error "%s: is not a function" func))
         (put func 'common-lisp-indent-function-for-elisp indent))

       (fix-elisp-indent 'defalias 1)
       (fix-elisp-indent 'use-package 1))
   #+END_SRC

* Work in progress

  This is for testing or things that aren't fleshed out still.

  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t
          initial-scratch-message ";; It Works!\n\n")
  #+END_SRC
