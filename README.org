# -*- eval: (tangle-init-org-file-after-save); -*-

#+TITLE: Emacs configuration file
#+AUTHOR: Nicolas Bertrand
#+STARTUP: showeverything
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* About
** Foreword

   2018-10-12, I declare .emacs.d bankruptcy.

   My current configuration used to rely on [[https://github.com/cask/cask][Cask]] and [[https://github.com/rdallasgray/pallet][Pallet]] but it
   didn't work anymore after upgrading to Emacs 26. I lived with a
   broken config for some months but it started becoming a real problem
   once I had to go through some config overhaul to accomodate sudden
   needs.

   Another point of pain was how I handled my bindings, especially for
   *Evil* where I had some custom text-object and thus corresponding
   motions. It's been almost a year that I want to try out [[https://github.com/noctuid/general.el][general]]
   alongside [[https://github.com/justbur/emacs-which-key][which-key]] to have a nice experience ala *Magit*,
   *Spacemacs*, *Doom*... etc.

   So, why not use *Spacemacs* or *Doom* directly? Well first, this is
   the occasion for me to learn more of *org-mode* (which I only
   scratched the surface of) and improves my *emacs-lisp*.

   After seeing so many people using org-mode to write their
   configuration with great success, why not do it myself?

   Anyway, I hope this attempt at a clean config won't end in
   bankruptcy this time...

** Aim

   * Keep it fast (at first, aim for less than 0.5s at startup)
   * Don't let it rot
   * Have a little bit of documentation so that I understand some of
     my choices afterwards

** License

   This configuration is licensed under the MIT license. See provided [[https://github.com/tampix/.emacs.d/blob/master/LICENSE][LICENSE]].

* Early init

  Take advantage on Emacs 27+ *early-init* file.

  Configure GC so it doesn't run during the init. This will be
  handled later in the init by GCMH.

  #+BEGIN_SRC emacs-lisp :tangle "early-init.el"
    (setq gc-cons-threshold most-positive-fixnum)
  #+END_SRC

  Disable menus and stuff. Calls to *tool-bar-mode* and
  *scroll-bar-mode* takes roughtly 100ms each, so disable those in
  =early-init.el=.

  #+BEGIN_SRC emacs-lisp :tangle "early-init.el"
    (push '(tool-bar-lines . 0) default-frame-alist)
    (push '(menu-bar-lines . 0) default-frame-alist)
    (push '(vertical-scroll-bars) default-frame-alist)
  #+END_SRC

* Bootstrapping

  First, let's ensure generated =init.el= has proper scoping and
  encoding.

  #+BEGIN_SRC emacs-lisp
     ;;; -*- lexical-binding: t -*-
     ;;; -*- coding: utf-8 -*-
  #+END_SRC

  Original =init.el= defines the way to reload the configuration.

  #+NAME: init
  #+BEGIN_SRC emacs-lisp
    (require 'subr-x)

    (defun in-emacs-dir (file)
      "Return the absolute path to FILE in `user-emacs-directory'."
      (file-truename (expand-file-name file user-emacs-directory)))

    (defvar tangle-init-org-file--first-time
      (not (file-exists-p (in-emacs-dir "init.elc")))
      "t if no init.elc exists.")

    (defun tangle-init-org-file (&optional no-compile)
      "Tangle, `byte-compile' and load the init file from README.org.

    With a prefix-argument, or a not-nil NO-COMPILE argument if
    called non-interactively, don't compile the tangled file.

    Return the absolute path to the tangle file if either NO-COMPILE
    is nil or `debug-on-error' is not-nil, else return nil."
      (interactive "P")
      (unless (boundp 'org-babel-tangle-file)
        (require 'ob-tangle))
      ;; For some reason, I can't make `org-babel-load-file' create the
      ;; .elc file during the first init, so for now, stick to manual
      ;; tangle -> compile -> load.
      (let ((tangled (thread-last
                       ;; car isn't always default tangled file when there
                       ;; are multiple tangled files
                       (org-babel-tangle-file (in-emacs-dir "README.org")
                                              nil
                                              "emacs-lisp")
                       (member (in-emacs-dir "README.el"))
                       car)))
        ;; When first loading the config, load the tangled file anyway to
        ;; ensure that packages are setup.
        (when tangle-init-org-file--first-time
          (load-file tangled))
        (if no-compile
            tangled
          (byte-compile-file tangled t)
          (rename-file (byte-compile-dest-file tangled)
                       "init.elc"
                       :ok-if-already-exists)
          (setq tangle-init-org-file--first-time nil)
          ;; Keep the init file for debug purposes.
          (if debug-on-error
              tangled
            (delete-file tangled)
            nil))))

    (defun tangle-init-org-file-after-save ()
      (add-hook 'after-save-hook #'tangle-init-org-file nil t))
    ;; It's a bit ugly but it does the job
    (setq safe-local-variable-values '((eval tangle-init-org-file-after-save)))
  #+END_SRC

  It should only be run once, at the first startup, as the real config
  will get generated, byte-compiled and loaded.

  To ensure modifications in this file update the configuration,
  =tangle-init-org-file= is added to the =after-save-hook= as a local
  variable of this file so that changes apply immediatly.

  #+BEGIN_SRC emacs-lisp :tangle "init.el" :noweb tangle
    <<init>>

    (when (and (not after-init-time) ; avoid recursive tangle
               tangle-init-org-file--first-time)
      (tangle-init-org-file))
  #+END_SRC

* General configuration

** cl-lib

   Import =cl-lib= at compile time.

   #+BEGIN_SRC emacs-lisp
    (eval-when-compile
      (require 'cl-lib))
   #+END_SRC

** Garbage collector

   Add a macro to inhibit GC.

   #+BEGIN_SRC emacs-lisp
     (defmacro inhibit-gc (&rest body)
       "Inhibit gc around BODY by setting `gc-cons-threshold' to
     `most-positive-fixnum'.

     \(fn BODY...)"
       (declare (indent 0)
                (debug t))
       `(let ((gc-cons-threshold most-positive-fixnum))
          ,@body))
   #+END_SRC

** Setup defaults

   Setup some default values.

   #+BEGIN_SRC emacs-lisp
     (setq echo-keystrokes 0.1
           bidi-display-reordering nil
           require-final-newline t
           ring-bell-function #'ignore
           require-final-newline t
           truncate-lines t
           scroll-step 1
           scroll-conservatively 10000
           auto-window-vscroll nil
           inhibit-default-init t
           inhibit-startup-screen t
           confirm-nonexistent-file-or-buffer nil)
   #+END_SRC

   Make custom file temporary.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (make-temp-file "custom" nil ".el"))
   #+END_SRC

   Put all auto saves in the same location.

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `((".*" . ,temporary-file-directory))
           auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
   #+END_SRC

   Change yes/no to y/n.

   #+BEGIN_SRC emacs-lisp
     (fset #'yes-or-no-p #'y-or-n-p)
   #+END_SRC

   Disable VC as i use Git through Magit exclusively.

   #+BEGIN_SRC emacs-lisp
     (setq vc-handled-backends nil)
   #+END_SRC

** TODO Stuff I should move to different files

   #+BEGIN_SRC emacs-lisp
     (defun disable-tabs ()
       "Disable tabs for indentation."
       (setq indent-tabs-mode nil))
   #+END_SRC

** Setup use-package

   Automatically install *use-package* if it's not installed.

   #+BEGIN_SRC emacs-lisp
     (require 'package)

     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (require 'use-package)

     (use-package use-package
       :ensure nil ; useless, just here to be consistent
       :custom (use-package-always-ensure t))
   #+END_SRC

** GCMH

   #+BEGIN_SRC emacs-lisp
     (use-package gcmh
       :hook
       (after-init . gcmh-mode))
   #+END_SRC

** esup

   Esup is a great package for profiling the init.
   Setup Esup to profile the byte-compiled version of the init.

   #+BEGIN_SRC emacs-lisp
     (use-package esup
       :init
       (defun esup-tangled ()
         "Profile ~/.emacs.d/init.elc.
     See `esup'"
         (interactive)
         (esup (tangle-init-org-file :no-compile))))
   #+END_SRC

** Theme and modeline

   Some themes have trouble when Emacs was run as a daemon. Create a
   one-time hook called *after-first-make-frame-hook* that is ran only
   once during the *after-make-frame-functions* hook.

   #+BEGIN_SRC emacs-lisp
     (defvar after-first-make-frame-hook nil
       "Functions to run after the first frame is created.
     If Emacs was started as a daemon, uses `after-make-frame-functions',
     else uses `after-init-hook'.")

     (defun run-after-first-make-frame-hooks ()
       "Run hooks in `after-first-make-frame-hook'."
       (if (daemonp)
           (cl-labels ((my--run-once (&optional frame)
                         (with-selected-frame (or frame (selected-frame))
                           (run-hooks 'after-first-make-frame-hook))
                         (remove-hook 'after-make-frame-functions #'my--run-once)))
             (add-hook 'after-make-frame-functions #'my--run-once))
         ;; not a daemon, run hooks in the `after-init-hook'
         (run-hooks 'after-first-make-frame-hook)))

     (add-hook 'after-init-hook #'run-after-first-make-frame-hooks)
   #+END_SRC

   Inspired by Doom Emacs, introduce a variable *my--theme* that is
   used to determine the default theme at startup.

   #+BEGIN_SRC emacs-lisp
     (defvar my--theme nil
       "Theme selected in the configuration.")

     (defun my--load-theme (&optional frame)
       "Load theme configured in `my--theme'.in FRAME."
       (if my--theme
           ;; don't load `my--theme' if it's already loaded
           (when (not (memq my--theme custom-enabled-themes))
             (with-selected-frame (or frame (selected-frame))
               (load-theme my--theme :no-confirm)))
         (error "`my-theme' shouldn't be nil")))

     (add-hook 'after-first-make-frame-hook #'my--load-theme)

     (defun my--reload-theme ()
       "Reload `my--theme'."
       (interactive)
       (my--load-theme))
   #+END_SRC

   Also inspired by Doom Emacs, add a hook on *load-theme* and ensure
   themes are loaded without any cluttering from previous themes.

   #+BEGIN_SRC emacs-lisp
     (defvar my--load-theme-hook nil
       "Hooks to run after `load-theme'.")

     (defun load-theme--after (theme &optional _ no-enable)
       "When `load-theme' is called, disable previous themes and run
     `my-load-theme-hook'."
       (unless no-enable
         (setq my--theme theme)
         (mapc #'disable-theme (remq theme custom-enabled-themes))
         (run-hooks 'my--load-theme-hook)))

     (advice-add 'load-theme :after #'load-theme--after)
   #+END_SRC

   Setup theme.

   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :init
       (setq my--theme 'doom-challenger-deep))
   #+END_SRC

   Setup modeline.

   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :config
       (defun enable-doom-modeline-icons ()
         (setq doom-modeline-icon t))
       (defun set-doom-modeline-height ()
         (setq doom-modeline-height (* 2 (doom-modeline--font-height))))
       :hook ((after-first-make-frame . doom-modeline-mode)
              (after-first-make-frame . enable-doom-modeline-icons)
              (after-first-make-frame . set-doom-modeline-height)
              (after-first-make-frame . column-number-mode)))
   #+END_SRC

   Setup solaire-mode.

   #+BEGIN_SRC emacs-lisp
     (use-package solaire-mode
       :when (or (daemonp) (display-graphic-p))
       :hook (after-first-make-frame . solaire-global-mode))
   #+END_SRC

** Setup Evil

   I've been a Vim enthusiast for about 10 years before I switched to
   Emacs back in 2013. I discovered Evil in 2012 and tried it out, but
   I wasn't ready to make the switch back then, even if I found the
   experience pretty impressive (especially since, at the time, Evil
   was very young).

   I was using [[https://github.com/ctrlpvim/ctrlp.vim][ctrlp.vim]] and [[https://github.com/tpope/vim-fugitive][fugitive.vim]] then, and was happy about
   it, but i knew that *Magit* was a level above *Fugitive* (I tried
   it out too). What really got me interested in Emacs was that I
   started using more and more of [[https://github.com/Shougo][Shougo]]'s Vim plugins, and one of
   them was [[https://github.com/Shougo/unite.vim][unite.vim]], which seemed brilliant to me. The deeper I got
   into using Unite and the more I got interested into Emacs as it was
   an *anything.el* clone (which became known as *helm* along the
   way).

   Anyway, import *Evil* and setup a very basic configuration for now.

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :commands evil-mode
       :init
       (setq evil-want-C-u-scroll t
             evil-want-C-i-jump t
             evil-want-C-w-in-emacs-state t
             evil-search-module 'evil-search
             evil-default-cursor t)
       :config
       (evil-define-text-object defun-text-object (count &optional beg end type)
         (save-excursion
           (mark-defun)
           (evil-range (region-beginning)
                       (region-end)
                       type
                       :expanded t)))
       :hook (after-init . evil-mode))
   #+END_SRC

** which-key

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :init
       (which-key-mode)
       :config
       (setq which-key-sort-order 'which-key-key-order-alpha
             which-key-idle-delay 0.1))
   #+END_SRC

** general

   Setup general with Vim like functions and some equivalents with a
   default global prefix.

   As SPC is already bound to *evil-forward-char* in the motion state,
   unbind it beforehand so it can be used as a global prefix.

   #+BEGIN_SRC emacs-lisp
     (use-package general
       :config
       (general-evil-setup t)

       (defconst my--prefix "SPC")
       (general-def
         :prefix my--prefix
         :states '(motion normal visual)
         ""
         '(nil :which-key "Main prefix"))
       (general-create-definer prefix-map
           :prefix my--prefix
           :prefix-command 'my--prefix-command
           :prefix-map 'my--prefix-map)
       (general-create-definer prefix-mmap
           :prefix my--prefix
           :prefix-command 'my--prefix-command
           :prefix-map 'my--prefix-map
           :states 'motion)
       (general-create-definer prefix-nmap
           :prefix my--prefix
           :prefix-command 'my--prefix-command
           :prefix-map 'my--prefix-map
           :states 'normal)
       (general-create-definer prefix-vmap
           :prefix my--prefix
           :prefix-command 'my--prefix-command
           :prefix-map 'my--prefix-map
           :states 'visual)
       (general-create-definer prefix-nvmap
           :prefix my--prefix
           :prefix-command 'my--prefix-command
           :prefix-map 'my--prefix-map
           :states '(normal visual))

       (tomap "m" #'defun-text-object))
   #+END_SRC

** Winner

   Use winner, mostly for *winner-undo*.

   #+BEGIN_SRC emacs-lisp
     (use-package winner
       :ensure nil
       :init
       (winner-mode 1)
       :config
       (nmap :prefix "C-w"
             "u" 'winner-undo))
   #+END_SRC

** hide-mode-line

   A package from *Doom*, which helps hiding modeline when it isn't
   pertinent.

   #+BEGIN_SRC emacs-lisp
     (use-package hide-mode-line
       :commands hide-mode-line-mode)
   #+END_SRC

** Magit

   *Magit* was what, along with *Evil*, sold me Emacs at first. I
   tried it out back in 2012 and even then, I was amazed by it's ease
   of use and power (mind that I was using *Fugitive* at the time,
   which was powerful in it's own right).

   It's become even more awesome as time went by, and really thank
   it's contributors, and especially [[https://github.com/tarsius][tarsius]], who deserves all the
   praise he got, without any shadow of a doubt, for what is the best
   *Git* porcelain out there.

   Surprisingly, I don't have much configuration going on for
   it... Guess that means the defaults are sane and well thought of.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :commands magit-status
       :general
       (:keymaps 'magit-status-mode-map my--prefix nil)
       (prefix-map :keymaps 'magit-status-mode-map "SPC" 'magit-diff-show-or-scroll-up)
       :config
       ;; Ensure `magit-status' is fullframe. Previous window configuration
       ;; is restored by default.
       (setq magit-display-buffer-function
             #'magit-display-buffer-fullframe-status-v1)
       (add-hook 'magit-mode-hook #'hide-mode-line-mode)
       (add-hook 'magit-popup-mode-hook #'hide-mode-line-mode)
       (add-hook 'with-editor-mode-hook #'evil-insert-state))
   #+END_SRC

** Forge

   *Forge* is a new package so config is going to be minimal.
   Mostly used for *github-review*.

   #+BEGIN_SRC emacs-lisp
     (use-package forge
       :after (magit)
       :config
       (setq forge-toggle-closed-visibility t)
       (setcdr forge-topic-list-limit -5))
   #+END_SRC

** github-review

   Do GitHub Pull Request reviews from Emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package github-review
       :after forge
       :commands (github-review-start
                  github-review-forge-pr-at-point))
   #+END_SRC

** git-timemachine

   #+BEGIN_SRC emacs-lisp
     (use-package git-timemachine
       :commands (git-timemachine
                  git-timemachine-toggle))
   #+END_SRC

*** TODO fix binding conflicts with evil

** Helm

   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :commands helm-mode
       :general
       (general-def
           "M-x" 'helm-M-x)
       (general-def :keymaps 'helm-map
         "TAB" 'helm-execute-persistent-action
         "C-i" 'helm-execute-persistent-action
         "C-z" 'helm-select-action)
       :init
       (setq helm-split-window-inside-p t
             helm-move-to-line-cycle-in-source t
             helm-ff-search-library-in-sexp t
             helm-ff-file-name-history-use-recentf t
             helm-M-x-requires-pattern nil)
       :config
       :hook (after-init . helm-mode))
   #+END_SRC

** helm-ag

   #+BEGIN_SRC emacs-lisp
     (use-package helm-ag
       :after (helm))
   #+END_SRC

** helm-xref

   #+BEGIN_SRC emacs-lisp
     (use-package helm-xref
       :config
       (setq xref-show-xrefs-function #'helm-xref-show-xrefs
             helm-xref-candidate-formatting-function #'helm-xref-format-candidate-long))
   #+END_SRC

** Projectile

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :diminish (projectile-mode)
       :commands (projectile-mode
                  projectile-find-file
                  projectile-switch-project
                  projectile-switch-to-buffer)
       :general
       (prefix-nmap
           "p" '(:keymap projectile-command-map :which-key "Projectile"))
       :config
       (projectile-mode t)
       (recentf-mode t)
       (setq projectile-enable-caching t
             projectile-sort-order 'recentf
             projectile-completion-system 'helm
             projectile-switch-project-action 'projectile-vc))
   #+END_SRC

** helm-projectile

   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :after (helm projectile)
       :config
       (helm-projectile-on))
   #+END_SRC

** flycheck

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :hook (prog-mode . flycheck-mode))
   #+END_SRC

** yasnippet

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :pin melpa
       :hook (prog-mode . yas-minor-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet-snippets
       :hook (yasnipppet . yasnippet-snippets-initialize))
   #+END_SRC

** all-the-icons

   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :config
       (defun my--all-the-icons-setup ()
         (if (display-graphic-p)
             (when (not (member "all-the-icons" (font-family-list)))
               (all-the-icons-install-fonts t))))
       :hook (before-make-frame . my--all-the-icons-setup))

     (use-package all-the-icons-dired
       :hook (dired-mode . all-the-icons-dired-mode))
   #+END_SRC

** company

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :general
       (imap "C-SPC" 'company-complete)
       (general-def :keymaps 'company-active-map
         "C-n" 'company-select-next
         "C-p" 'company-select-previous)
       :config
       (setq company-tooltip-align-annotations t
             company-show-quick-access t)
       :hook (after-init . global-company-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package company-quickhelp
       :hook (company-mode . company-quickhelp-local-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package company-box
       :after (all-the-icons company)
       :config
       (setq company-box-icons-alist 'company-box-icons-all-the-icons)
       :hook (company-mode . company-box-mode))
   #+END_SRC

** lsp

   Setup *lsp-mode*. Don't setup *lsp-ui* for now as it's very
   cumbersome (disable sideline, doc, company-quickhelp override...)

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :commands lsp
       :general
       (prefix-nmap
           "l" '(:prefix-command my--lsp-command :prefix-map my--lsp-map :which-key "LSP"))
       (general-def :keymaps 'my--lsp-map
         "" '(nil :which-key "LSP")
         "f" '(:prefix-command my--lsp-find-command :prefix-map my--lsp-find-map :which-key "Find")
         "e" '(lsp-execute-code-action :which-key "Execute code action")
         "=" '(lsp-format-dwim :which-key "Format dwim")
         "h" '(lsp-document-highlight :which-key "Highlight symbol")
         "r" '(lsp-rename :which-key "Rename symbol under point")
         "?" '(lsp-describe-thing-at-point :which-key "Describe thing at point"))
       (general-def :keymaps 'my--lsp-find-map
         "" '(nil :which-key "LSP Find")
         "d" '(lsp-find-definition :which-key "Definition")
         "D" '(lsp-find-declaration :which-key "Declaration")
         "i" '(lsp-find-implementation :which-key "Implementation")
         "t" '(lsp-find-type-definition :which-key "Type definition")
         "r" '(lsp-find-references :which-key "References"))
       :init
       (defun lsp-format-dwim ()
         "Format using `lsp-format-region' is `region-active-p', or
     else use `lsp-format-buffer'."
         (interactive)
         (if (region-active-p)
             (lsp-format-region (region-beginning) (region-end))
           (lsp-format-buffer)))
       :config
       (setq lsp-prefer-flymake nil
             lsp-enable-xref t
             lsp-enable-snippets t
             lsp-eldoc-render-all t
             lsp-enable-on-type-formatting t))
   #+END_SRC

** Restclient

   #+BEGIN_SRC emacs-lisp
     (use-package restclient)
   #+END_SRC

** Rainbow delimiters

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))
   #+END_SRC

** highlight-defined

   #+BEGIN_SRC emacs-lisp
     (use-package highlight-defined)
   #+END_SRC

* Per language configuration

  Here goes every language specific configuration.

** Org

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :preface
       ;; See `package-installed-p' implementation
       (assq-delete-all 'org package--builtins)
       (assq-delete-all 'org package--builtin-versions)
       :hook ((org-mode . disable-tabs)
              (org-mode . yas-minor-mode)))
   #+END_SRC

** Emacs Lisp configuration

   Because the indentation of =cl-flet= and such is still broken as of
   [2018-10-14 Sun], fix their indentation.

   #+BEGIN_SRC emacs-lisp
     (use-package lisp-mode
       :ensure nil
       :commands emacs-lisp-mode
       :config
       (setq lisp-indent-function 'common-lisp-indent-function)
       :hook ((lisp-mode . disable-tabs)
              (emacs-lisp-mode . disable-tabs)
              (eamcs-lisp-mode . highlight-defined)))

     (use-package cl-indent
       :ensure nil
       :commands common-lisp-indent-function
       :config
       (defun fix-elisp-indent (func indent)
         "Fix the indendation of elisp forms that
     `common-lisp-indent-function' might have broken."
         (unless (and (symbolp func)
                      (fboundp func))
           (error "%s: is not a function" func))
         (put func 'common-lisp-indent-function-for-elisp indent))

       (fix-elisp-indent 'defalias 1)
       (fix-elisp-indent 'define-clojure-indent 0)
       (fix-elisp-indent 'use-package 1))
   #+END_SRC

** Java

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-java
       :after lsp-mode
       :config
       (setq lsp-java-java-path "/usr/lib/jvm/java-11-openjdk/bin/java"
             lsp-java-vmargs '("-server"
                               "-noverify"
                               "-Xms2G"
                               "-Xmx2G"
                               "-XX:+UseG1GC"
                               "-XX:+UseStringDeduplication"
                               "-XX:MaxGCPauseMillis=150"
                               "-XX:+AlwaysPreTouch"
                               "-XX:TargetSurvivorRatio=80")
             lsp-java-format-on-type-enabled t
             lsp-java-code-generation-hash-code-equals-use-java7objects t
             lsp-java-code-generation-use-blocks t)
       :hook (java-mode . lsp))
   #+END_SRC

** Clojure

   #+BEGIN_SRC emacs-lisp
     (use-package clojure-mode
       :config
       (define-clojure-indent
         (defroutes 'defun)
         (GET 2)
         (POST 2)
         (PUT 2)
         (DELETE 2)
         (HEAD 2)
         (ANY 2)
         (OPTIONS 2)
         (PATCH 2)
         (rfn 2)
         (let-routes 1)
         (context 2)))

     (use-package cider
       :after clojure
       :hook (cider-mode . cider-enlighten-mode))

     (use-package clj-refactor
       :after cider
       :general
       (prefix-nmap
           "c" '(hydra-cljr-help-menu/body :which-key "Clojure Refactor"))
       :hook (clojure-mode . clj-refactor-mode))
   #+END_SRC

** Terraform

   #+BEGIN_SRC emacs-lisp
     (use-package terraform-mode)

     (use-package company-terraform)

     (use-package terraform-doc)
   #+END_SRC

** YAML

   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode)
   #+END_SRC
